Searching for Topics in a Large Collection of Texts
Martin Holub Ji
r�
i Semeck�
y Ji
r�
i Divi
s
Center for Computational Linguistics
Charles University, Prague
  holub|semecky� @ufal.mff.cuni.cz
jiri.divis@atlas.cz
Abstract
We describe an original method that
automatically finds specific topics in a
large collection of texts. Each topic is
first identified as a specific cluster of
texts and then represented as a virtual
concept, which is a weighted mixture of
words. Our intention is to employ these
virtual concepts in document indexing.
In this paper we show some preliminary
experimental results and discuss directions of future work.
1 Introduction
In the field of information retrieval (for a detailed
survey see e.g. (Baeza-Yates and Ribeiro-Neto,
1999)), document indexing and representing documents as vectors belongs among the most successful techniques. Within the framework of the
well known vector model, the indexed elements
are usually individual words, which leads to high
dimensional vectors. However, there are several
approaches that try to reduce the high dimensionality of the vectors in order to improve the effectivity of retrieving. The most famous is probably
the method called Latent Semantic Indexing (LSI),
introduced by Deerwester et al. (1990), which employs a specific linear transformation of original
word-based vectors using a system of "latent semantic concepts". Other two approaches which
inspired us, namely (Dhillon and Modha, 2001)
and (Torkkola, 2002), are similar to LSI but different in the way how they project the vectors of
documents into a space of a lower dimension.
Our idea is to establish a system of "virtual
concepts", which are linear functions represented
by vectors, extracted from automatically discovered "concept-formative clusters" of documents.
Shortly speaking, concept-formative clusters are
semantically coherent and specific sets of documents, which represent specific topics. This idea
was originally proposed by Holub (2003), who
hypothesizes that concept-oriented vector models
of documents based on indexing virtual concepts
could improve the effectiveness of both automatic
comparison of documents and their matching with
queries.
The paper is organized as follows. In section 2
we formalize the notion of concept-formative clusters and give a heuristic method of finding them.
Section 3 first introduces virtual concepts in a
formal way and shows an algorithm to construct
them. Then, some experiments are shown. In sections 4 we compare our model with another approach and give a brief survey of some open questions. Finally, a short summary is given in section 5.
2 Concept-formative clusters
2.1 Graph of a text collection
Let ����������!#" be a collection of text
documents; $ is the size of the collection. Now
suppose that we have a function %&('0)1�324�567�
%&8'0)1�95@�2A6CB D1EFG�H , which gives a degree of
document similarity for each pair of documents.
Then we represent the collection as a graph.
Definition: A labeled graph   is called graph of
collection � if   � )� �� 6 where
� � � ���@24�95"�������� %&8'0)1�@24�956 "
and each edge  � ���!24�5" B� is labeled by
number  ) 6 � %&('0)1�2 �956 , called weight of  ;
 "! E is a given document similarity threshold
(i.e. a threshold weight of edge).
Now we introduce some terminology and necessary notation. Let   � )� �� 6 be a graph of collection � . Each subset #%$ � is called a cut of   ;
&
# stands for the complement �(')# . If 0 �12$ �
are disjoint cuts then
354
)60 6 � �7��8 B9�@AB$C0#" is a set of edges
within cut 0 ;
3
 )60 6 � D@E�F�GIHQPSR8T ) 6 is called weight of
cut 0 ;
354
)60 �1 6 � 4
)60VUW1 6X' ) 4
)60 6SU
4
)61 6 6 is a set
of edges between cuts 0 and 1 ;
3
 )60 �1 6 �YD`E�F�GIHQPba cdReT ) 6 is called weight
of the connection between cuts 0 and 1 ;
3 &
 �  )� 6Ifhg pi is the expected weight of
edge in graph   ;
3 &
 )q# 6 � &
sr gut vwt
 i is the expected weight of
cut # ;
3 &
 )q#  &
# 6 � &
Wrx� #�yr )1$� #� 6 is the expected
weight of the connection between cut X and
the rest of the collection;
3
each cut # naturally splits the collection into
three disjoint subsets � �#U
v
U
v
where 
v
� � B �'#�
4
) � "@I# 6��Y!"
and 
v
� �' )q#U
v
6 .
2.2 Quality of cuts
Now we formalize the property of "being concept-formative" by a positive real function called quality of cut. A high value of quality means that a cut
must be specific and extensive.
A cut # is called specific if (i) the weight
 )q# 6 is relatively high and (ii) the connection between # and the rest of the collection
 )q#  &
# 6 is relatively small. The first property is called compactness of cut, and is defined
as )@' )q# 6 � )q# 6If
&
 )q# 6 , while the other is
called exhaustivity of cut, which is defined as
"dpe
)q# 6 � &
 )q#  &
# 6If7 )q#  &
# 6 . Both functions
are positive.
Thus, the specificity of cut # can be formalized
by the following formula
f
 )q# 6
&
 )q# 68gihkj
rml
&
 )q#  &
# 6
 )q#  &
# 6kn hpo
-- the greater this value, the more specific the
cut # ; q � and q  are positive parameters, which
are used for balancing the two factors.
The extensity of cut # is defined as a positive
function
"dsr
)q# 6 �utv8w yxqyIz � #� where { Ex|  is a
threshold size of cut.
Definition: The total quality of cut } )q# 6 is a positive real function composed of all factors mentioned above and is defined as
} )q# 6 �~)@' )q# 6
hkj
r
dse
)q# 6
hpo
r
dr
)q# 6
h
where the three lambdas are parameters whose
purpose is balancing the three factors.
To be concept-formative, a cut (i) must have a
sufficiently high quality and (ii) must be locally
optimal.
2.3 Local optimization of cuts
A cut # $ � is called locally optimal regarding
quality function } if each cut #5$ � which is
only a small modification of the original # does
not have greater quality, i.e. } )q#5(6)} )q# 6 .
Now we describe a local search procedure
whose purpose is to optimize any input cut # ;
if # is not locally optimal, the output of the
Local Search procedure is a locally optimal
cut #5 which results from the original # as its local modification. First we need the following definition:
Definition: Potential of document � B � with respect to cut #%$ � is a real function

)1� I# 6 : �` )� 6i% defined as

)1� I# 6 �} )q#U ��� "96V} )q#' ���"96 
The Local Search procedure is described in
Fig. 1. Note that
1. Local Search gradually generates a sequence of cuts #
H�R
I#
H � R
I#
H  R
  so that
Input: the graph of text collection   ;
an initial cut ����������  .
Output: locally optimal cut � .
Algorithm:  
loop: !"$#&%')(10�2�y436587�9A@CBEDGFIHP�Q��RS�UT
if B8DV!WH� ��RA� TYX` then a
� ��RSb
j
� $� ��RS�dc ae!gf
h$pirq
goto loop
f
!s$#&%')(t#&uWv 36w6x5 7y9A@BEDGdHP����RA�UT
if B8DV!WH����RA�UTY` then a
� ��RSb
j
� $� ��RS�d a&!gf
h$pirq
goto loop
f
�  $� ��RS�
end
Figure 1: The Local Search Algorithm
(i) } )q#
H 2 � R
6} )q#
H 2R
6 for � ! G , and
(ii) cut #
H 2R
always arises from #
H 2 � R
by
adding or taking away one document
into/from it;
2. since the quality of modified cuts cannot increase infinitely, a finite  ! E necessarily
exists so that #
HS R
is locally optimal and consequently the program stops at least after the
 -th iteration;
3. each output cut #  is locally optimal.
Now we are ready to precisely define concept-formative clusters:
Definition: A cut # $ � is called a concept-formative cluster if
(i) } )q# 6 !  where   is a threshold quality
and
(ii) # �#  where #  is the output of the
Local Search algorithm.
The whole procedure for finding conceptformative clusters consists of two basic stages:
first, a set of initial cuts is found within the whole
collection, and then each of them is used as a seed
for the Local Search algorithm, which locally
optimizes the quality function } .
Note that q � q q) are crucial parameters,
which strongly affect the whole process of searching and consequently also the character of resulting concept-formative clusters. We have optimized their values by a sort of machine learning, using a small manually annotated collection
of texts. When optimized q -parameters are used,
the Local Search procedure tries to simulate
the behavior of human annotator who finds topically coherent clusters in a training collection. The
task of q -optimization leads to a system of linear
inequalities, which we solve via linear programming. As there is no scope for this issue here, we
cannot go into details.
3 Virtual concepts
In this section we first show that concept-formative clusters can be viewed as fuzzy sets. In
this sense, each concept-formative cluster can be
characterized by a membership function. Fuzzy
clustering allows for some ambiguity in the data,
and its main advantage over hard clustering is
that it yields much more detailed information
on the structure of the data (cf. (Kaufman and
Rousseeuw, 1990), chapter 4).
Then we define virtual concepts as linear functions which estimate degree of membership of
documents in concept-formative clusters. Since
virtual concepts are weighted mixtures of words
represented as vectors, they can also be seen as
virtual documents representing specific topics that
emerge in the analyzed collection.
Definition: Degree of membership of a document
� B � in a concept-formative cluster # $ �
is a function  )1� I# 6 : �  )� 65X  . For
� B #5U
v
we define  )1� I# 6 � 4 dh ) 
)1�I# 6 6
where  E is a constant. For � B 
v
we define
 )1�I# 6 ��E .
The following holds true for any concept-formative cluster # and any document � :
3
 )1�I# 6 ! G iff � B # ;
3
 )1�I# 6 B )1EFG�6 iff � B9
v
.
Now we formalize the notion of virtual concepts. Let  � e  e B~`d be vector representations of documents � ���! , where
Input:
 
pairs
���
j
H���D�
j
T�� H������ H ���
H���D�
T��
where
�
j
H����� H � 
;

... maximal number of words in output concept;
!#"$"
... quadratic residual error threshold.
Output:
%
 & 
... output concept;
!#"#"
 ... quadratic residual error;

 ... number of words in the output concept.
Algorithm:
'
)( ,
!#"#"
8 i10
while D�2
'
2 X 43 !#"$"
  !#"#"
T do a
!#"$"
  i10
for each  
a q4H5����� H76 f c '
do a
%
 output of MLRDa ���98
H$��D�@8
T��f

8A
j
H '
 aeUf&T
!#"$"
 D

8A
j
DB��D� 8
TDC
%FE
� 8
T
o
if
!#"$"
X !#"$"
 then a
%
E %
, P8$,
!#"$"
8 !#"#"
f
f'
 '
 a   f
f
EG2
'
2
end
Figure 2: The Greedy Regression Algorithm
H
is the number of indexed terms. We look for
such a vector I
v
B9`d so that
I
v
rg 2QP  )1�@24I# 6
approximately holds for any � B �G9$ " . This
vector I
v
is then called virtual concept corresponding to concept-formative cluster # .
The task of finding virtual concepts can be
solved using the Greedy Regression Algorithm
(GRA), originally suggested by Semeck�
y (2003).
3.1 Greedy Regression Algorithm
The GRA is directly based on multiple linear regression (see e.g. (Rice, 1994)). The GRA works
in iterations and gradually increases the number of
non-zero elements in the resulting vector, i.e. the
number of words with non-zero weight in the resulting mixture. So this number can be explicitly
restricted by a parameter. This feature of the GRA
has been designed for the sake of generalization,
in order to not overfit the input sample.
The input of the GRA consists of (i) a sample set of document vectors with the corresponding values of  )1�I# 6 , (ii) a maximum number of
non-zero elements, and (iii) an error threshold.
The GRA, which is described in Fig. 2, requires a procedure for solving multiple linear regression (MLR) with a limited number of nonzero elements in the resulting vector. Formally,
SRQT ) �!DVU 5 I�5H "XW5`Y � ba 6 gets on input
3
a set of c vectors U 5#B9`d ;
3
a corresponding set of c values  5 B  to be
approximated; and
3
a set of indexes a $C�G� H
" of the elements which are allowed to be non-zero in
the output vector.
The output of the MLR is a vector
U  �edgf�w ' &�h
i
W
p
5qY � )VU9rrU 55�56 
where each considered U � DVs � 5s
d H must
fulfill s 2 ��E for any � B �G H
"'ta .
Implementation and time complexity
For solving multiple linear regression we use a
public-domain Java package JAMA (2004), developed by the MathWorks and NIST. The computation of inverse matrix is based on the LU decomposition, which makes it faster (Press et al., 1992).
As for the asymptotic time complexity of the
GRA, it is in u )r
H
r complexity of the MLR6
since the outer loop runs  times at maximum and
the inner loop always runs nearly H
times. The
MLR substantially consists of matrix multiplications in dimension c   and a matrix inversion
in dimension @  . Thus the complexity of the
MLR is in u )  r9cwv   6 �xu )  r@c 6 because
yc . So the total complexity of the GRA is in
u ) H
rc rW  6 .
To reduce this high computational complexity,
we make a term pre-selection using a heuristic
method based on linear programming. Then, the
GRA does not need to deal with high-dimensional
vectors in  d , but works with vectors in dimension H

H
. Although the acceleration is only
linear, the required time has been reduced more
than ten times, which is practically significant.
3.2 Experiments
The experiments reported here were done on a
small experimental collection of $ � @3@9
Czech documents. The texts were articles from
two different newspapers and one journal. Each
document was morphologically analyzed and lemmatized (Haji
c, 2000) and then indexed and represented as a vector. We indexed only lemmas
of nouns, adjectives, verbs, adverbs and numerals whose document frequency was greater than GE
and less than  EFE E E . Then the number of indexed
terms was H
�e��3@@ . The cosine similarity was
used to compute the document similarity; threshold was   � EF . There were � � 3��� 9 edges in
the graph of the collection.
We had computed a set of concept-formative
clusters and then approximated the corresponding
membership functions by virtual concepts.
The first thing we have observed was that the
quadratic residual error systematically and progresivelly decreases in each GRA iteration. Moreover, the words in virtual concepts are obviously
intelligible for humans and strongly suggest the
topic. An example is given in Table 1.
words in the concept the weights
Czech lemma literally transl.

���

� q 
bosensk�
y Bosnian qq� � q`� Wq
Srb Serb X�  r� 6
UNPROFOR UNPROFOR r� � r� �
OSN UN X� � r� 4
Sarajevo Sarajevo r�   r� 
muslimsk�
y Muslim (adj) -- r� 
odvolat withdraw -- �r��q
srbsk�
y Serbian -- r� ��
gener�
al general (n) -- X� �
list paper -- C q`� gq
quadratic residual error: �r� � X� 4
Table 1: Two virtual concepts ( � � and  � GE )
corresponding to cluster #318.
Another example is cluster #19 focused on
"pension funds", which was approximated
( �  E ) by the following words (literally translated):
pensionb (adj), pensionb (n), fundb , additional insuranceb ,
inheritanceb , payment! , interestb (n), dealerb , regulation! ,
lawsuitb , August! (adj), measure! (n), approveb ,
increaseb (v), appreciationb , propertyb , trade! (adj),
attentivelyb , improveb , coupon! (adj).
(The signs after the words indicate their positive
or negative weights in the concept.) Figure 3
shows the approximation of this cluster by virtual
concept.
Figure 3: The approximation of membership function corresponding to cluster #19 by a virtual concept (the number of words in the concept  �"� ).
4 Discussion
4.1 Related work
A similar approach to searching for topics and employing them for document retrieval has been recently suggested by Xu and Croft (2000), who,
however, try to employ the topics in the area of
distributed retrieval.
They use document clustering, treat each cluster as a topic, and then define topics as probability distributions of words. They use the Kullback-Leibler divergence with some modification as a
distance metric to determine the closeness of a
document to a cluster. Although our virtual concepts cannot be interpreted as probability distributions, in this point both approaches are quite similar.
The substantial difference is in the clustering
method used. Xu and Croft have chosen the
K-Means algorithm, "for its efficiency". In contrast to this hard clustering algorithm, (i) our
method is consistently based on empirical analysis
of a text collection and does not require an a priori
given number of topics; (ii) in order to induce permeable topics, our concept-formative clusters are
not disjoint; (iii) the specificity of our clusters is
driven by training samples given by human.
Xu and Croft suggest that retrieval based on
topics may be more robust in comparison with
the classic vector technique: Document ranking
against a query is based on statistical correlation
between query words and words in a document.
Since a document is a small sample of text, the
statistics in a document are often too sparse to reliably predict how likely the document is relevant
to a query. In contrast, we have much more texts
for a topic and the statistics are more stable. By
excluding clearly unrelated topics, we can avoid
retrieving many of the non-relevant documents.
4.2 Future work
As our work is still in progress, there are some
open questions, which we will concentrate on in
the near future. Three main issues are (i) evaluation, (ii) parameters setting (which is closely connected to the previous one), and (iii) an effective
implementation of crucial algorithms (the current
implementation is still experimental).
As for the evaluation, we are building a manually annotated test collection using which we want
to test the capability of our model to estimate inter-document similarity in comparison with the classic vector model and the LSI model. So far, we
have been working with a Czech collection for we
also test the impact of morphology and some other
NLP methods developed for Czech. Next step will
be the evaluation on the English TREC collections, which will enable us to rigorously evaluate
if our model really helps to improve IR tasks.
The evaluation will also give us criteria for parameters setting. We expect that a positive value
of T  will significantly accelerate the computation
without loss of quality, but finding the right value
must be based on the evaluation. As for the most
important parameters of the GRA (i.e. the size of
the sample set c and the number of words in concept  ), these should be set so that the resulting
concept is a good membership estimator also for
documents not included in the sample set.
5 Summary
We have designed and implemented a system that
automatically discovers specific topics in a text
collection. We try to employ it in document indexing. The main directions for our future work are
thorough evaluation of the model and optimization
of the parameters.
Acknowledgments
This work has been supported by the Ministry of
Education, project Center for Computational Linguistics (project LN00A063).
References
Ricardo A. Baeza-Yates and Berthier A. Ribeiro-Neto.
1999. Modern Information Retrieval. ACM Press /
Addison-Wesley.
Scott C. Deerwester, Susan T. Dumais, Thomas K. Landauer, George W. Furnas, and Richard A. Harshman.
1990. Indexing by latent semantic analysis. JASIS,
41(6):391�407.
Inderjit S. Dhillon and D. S. Modha. 2001. Concept
decompositions for large sparse text data using clustering. Machine Learning, 42(1/2):143�175.
Jan Haji
c. 2000. Morphological tagging: Data vs. dictionaries. In Proceedings of the 6th ANLP Conference, 1st NAACL Meeting, pages 94�101, Seattle.
Martin Holub. 2003. A new approach to conceptual document indexing: Building a hierarchical system of concepts based on document clusters. In
M. Aleksy et al. (eds.): ISICT 2003, Proceedings
of the International Symposium on Information and
Communication Technologies, pages 311�316. Trinity College Dublin, Ireland.
JAMA. 2004. JAMA: A Java Matrix Package. Publicdomain, http://math.nist.gov/javanumerics/jama/.
Leonard Kaufman and Peter J. Rousseeuw. 1990.
Finding Groups in Data. John Wiley & Sons.
W. H. Press, S. A. Teukolsky, W. T. Vetterling, and B. P.
Flannery. 1992. Numerical Recipes in C. Second
edition, Cambridge University Press, Cambridge.
John A. Rice. 1994. Mathematical Statistics and Data
Analysis. Second edition, Duxbury Press, California.
Ji
r�
i Semeck�
y. 2003. Semantic word classes extracted from text clusters. In 12th Annual Conference WDS 2003, Proceeding of Contributed Papers.
MATFYZPRESS, Prague.
Kari Torkkola. 2002. Discriminative features for document classification. In Proceedings of the International Conference on Pattern Recognition, Quebec
City, Canada, August 11�15.
Jinxi Xu and W. Bruce Croft. 2000. Topic-based language models for distributed retrieval. In W. Bruce
Croft (ed.): Advances in Information Retrieval,
pages 151�172. Kluwer Academic Publishers.

